"""ARIMA Model"""
__docformat__ = "numpy"

import logging
from typing import Any, Tuple, Union, List, Optional


import pandas as pd

from darts import TimeSeries
from darts.models import ARIMA
from openbb_terminal.decorators import log_start_end

from openbb_terminal.forecasting import helpers

logger = logging.getLogger(__name__)


@log_start_end(log=logger)
def get_ARIMA_data(
    data: Union[pd.Series, pd.DataFrame],
    n_predict: int = 5,
    target_col: str = "close",
    forecast_horizon: int = 5,
    p: int = 12,
    d: int = 1,
    q: int = 0,
    trend: Optional[str] = None,
) -> Tuple[List[TimeSeries], List[TimeSeries], List[TimeSeries], float, Any]:
    """Perform ARIMA Forecasting

    Args:
        data (Union[pd.Series, pd.DataFrame]):
            Input Data
        n_predict (int, optional):
            Days to predict. Defaults to 5.
        target_col (str, optional):
            Target column to forecast. Defaults to "close".
        train_split (float, optional):
            Train/val split. Defaults to 0.85.
        past_covariates (str, optional):
            Multiple secondary columns to factor in when forecasting. Defaults to None.
        forecast_horizon (int, optional):
            Forecast horizon when performing historical forecasting. Defaults to 5.
        p (int, optional):
            Order of the autoregressive model. Defaults to 12.
        d (int, optional):
            The order of differentiation. Defaults to 1.
        q (int, optional):
            The size of the moving average window. Defaults to 0.
        trend (str, optional):
            Parameter controlling the deterministic trend. Defaults to 0.


    Returns:
        List[TimeSeries]
            Adjusted Data series
        List[TimeSeries]
            Historical forecast by best RNN model
        List[TimeSeries]
            list of Predictions
        float
            Mean average precision error
        Any
            Best NBEATS Model
    """

    # TODO Check if torch GPU AVAILABLE
    # todo add in all possible parameters for training

    use_scalers = False
    probabilistic = True
    _, scaler, ticker_series = helpers.get_series(data, target_col, is_scaler=use_scalers)

    arima_model = ARIMA(p=p, d=d, q=q, trend=trend)

    # fit model on train series for historical forecasting
    helpers.fit_model(
        arima_model,
        ticker_series,
    )

    # Showing historical backtesting without retraining model (too slow)
    return helpers.get_prediction(
        "ARIMA",
        probabilistic,
        use_scalers,
        scaler,
        None,
        arima_model,
        ticker_series,
        None,
        None,
        forecast_horizon,
        n_predict,
    )
